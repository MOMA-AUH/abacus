import random

import pytest
from pyfaidx import Fasta

from abacus.config import config
from abacus.graph import Locus, Read, get_graph_alignments, get_satellite_counts_from_path, get_satellite_strings
from abacus.locus import process_str_pattern


@pytest.mark.parametrize(
    "structure, read, expected_satellite_counts",
    [
        # Single satellite tests
        pytest.param(
            "(AGA)+",
            "AGA",
            [1],
            id="Single satellite x 1",
        ),
        pytest.param(
            "(CAG)+",
            "CAG" * 10,
            [10],
            id="Single satellite x 10",
        ),
        pytest.param(
            "(TTA)+",
            "TTA" * 100,
            [100],
            id="Single satellite x 100",
        ),
        # Multiple satellites tests
        pytest.param(
            "(AGA)+(CAG)+",
            "AGA" * 3 + "CAG" * 5,
            [3, 5],
            id="Two satellites x (3, 5)",
        ),
        # Ambiguous bases
        # N = A or C or G or T
        # R = A or G
        # Y = C or T
        # W = A or T
        # K = G or T
        pytest.param(
            "(ANA)+",
            "AGA",
            [1],
            id="Ambiguity, N: x (1)",
        ),
        pytest.param(
            "(AGA)+(ANA)+",
            "AGA" * 5 + "ATA" * 3,
            [5, 3],
            id="Ambiguity, N: x (5 ,3)",
        ),
        pytest.param(
            "(N)+(AGA)+",
            "T" * 5 + "AGA",
            [5, 1],
            id="Ambiguity, N: x (5, 1)",
        ),
        pytest.param(
            "(N)+",
            "T" * 19,
            [19],
            id="Ambiguity, N: x (19)",
        ),
        pytest.param(
            "(ARA)+",
            "AGA",
            [1],
            id="Ambiguity, R: x (1)",
        ),
        pytest.param(
            "(ATA)+(ARA)+",
            "ATA" * 5 + "AGA" * 3,
            [5, 3],
            id="Ambiguity, R: x (5 ,3)",
        ),
        pytest.param(
            "(R)+(CAC)+(Y)+",
            "G" * 5 + "CAC" * 3 + "T" * 7,
            [5, 3, 7],
            id="Ambiguity, R,Y: x (5, 3, 7)",
        ),
        # Skippability
        pytest.param(
            "(TTC)*",
            "",
            [0],
            id="Skippability x 0",
        ),
        pytest.param(
            "(TTC)*",
            "TTC" * 17,
            [17],
            id="Skippability x 17",
        ),
        pytest.param(
            "(AGA)*(CAG)*",
            "",
            [0, 0],
            id="Skippability x (0, 0)",
        ),
        pytest.param(
            "(AGA)*(CAG)*",
            "AGA" * 11 + "CAG" * 13,
            [11, 13],
            id="Skippability x (11, 13)",
        ),
        pytest.param(
            "(AGA)*(CAG)*",
            "CAG",
            [0, 1],
            id="Skippability x (0, 1)",
        ),
        # Skipability with N
        pytest.param(
            "(N)*(AGA)*",
            "T" * 0 + "AGA" * 7,
            [0, 7],
            id="Skippability with N x (0, 7)",
        ),
        # Breaks
        pytest.param(
            "(AGA)*TTTTT(CAG)*",
            "AGA" * 0 + "TTTTT" + "CAG" * 0,
            [0, 0],
            id="Breaks: Internal x (0, 0)",
        ),
        pytest.param(
            "(AGA)*TTTTT(CAG)*",
            "AGA" * 7 + "TTTTT" + "CAG" * 0,
            [7, 0],
            id="Breaks: Internal x (7, 0)",
        ),
        pytest.param(
            "(AGA)*TTTTT(CAG)*",
            "AGA" * 0 + "TTTTT" + "CAG" * 5,
            [0, 5],
            id="Breaks: Internal x (0, 5)",
        ),
        pytest.param(
            "(AGA)*TTTTT(CAG)*",
            "AGA" * 7 + "TTTTT" + "CAG" * 5,
            [7, 5],
            id="Breaks: Internal x (7, 5)",
        ),
        pytest.param(
            "AAC(AAG)*(CAG)*AGG",
            "AAC" + "AAG" * 11 + "CAG" * 13 + "AGG",
            [11, 13],
            id="Breaks: Pre and post x (11, 13)",
        ),
        pytest.param(
            "AAC(AAG)*TTT(CAG)*AGG",
            "AAC" + "AAG" * 3 + "TTT" + "CAG" * 2 + "AGG",
            [3, 2],
            id="Breaks: Pre, internal and post x (3, 2)",
        ),
        # Edge cases
        pytest.param(
            "(AGA)+(CAG)*",
            "AGA" * 0 + "CAG" * 3,
            [1, 2],
            id="Edge case: Forced mismatch with +",
        ),
        pytest.param(
            "(TTTTTTTTTC)+",
            "AAAAAAAAAC" * 29,
            [29],
            id="Edge case: High percentage of mismatches in satellite",
        ),
        pytest.param(
            "(NTN)+(TNT)+",
            "ATG" * 3 + "TAT" * 17,
            [3, 17],
            id="Edge case: High percentage of Ns in satellites",
        ),
    ],
)
def test_get_satellite_counts_from_path(structure, read, expected_satellite_counts):
    alphabet = "ATCG"

    # Set seed for reproducibility
    random.seed(42)

    # Make random left and right anchors
    left_anchor = "".join(random.choices(alphabet, k=config.ANCHOR_LEN))
    right_anchor = "".join(random.choices(alphabet, k=config.ANCHOR_LEN))

    read_str = f"{left_anchor}{read}{right_anchor}"

    reads = [
        Read(
            name="read",
            sequence=read_str,
            qualities=[30] * len(read_str),
            strand="+",
            phase=0,
        ),
    ]

    satellites, breaks = process_str_pattern(structure)

    locus = Locus(
        id="locus1",
        chrom="chr1",
        start=100,
        end=200,
        left_anchor=left_anchor,
        right_anchor=right_anchor,
        structure=structure,
        satellites=satellites,
        breaks=breaks,
    )

    graph_aligments = get_graph_alignments(reads, locus)
    satellite_counts = get_satellite_counts_from_path(locus=locus, path=graph_aligments[0].path)

    assert satellite_counts == expected_satellite_counts


@pytest.mark.parametrize(
    "structure, read, expected_expected_kmer_string, expected_observed_kmer_string",
    [
        pytest.param(
            "(CAG)*",
            "",
            "",
            "",
            id="Empty read",
        ),
        pytest.param(
            "(CAG)*",
            "CAG" * 10,
            "-".join(["CAG"] * 10),
            "-".join(["CAG"] * 10),
            id="Single satellite x 10",
        ),
        pytest.param(
            "(CAG)*",
            "CAG" * 4 + "TTT" + "CAG" * 5,
            "-".join(["CAG"] * 10),
            "-".join(["CAG"] * 4 + ["TTT"] + ["CAG"] * 5),
            id="Single w error satellite x 10",
        ),
    ],
)
def test_get_satellite_strings(structure, read, expected_expected_kmer_string, expected_observed_kmer_string):
    alphabet = "ATCG"

    # Set seed for reproducibility
    random.seed(42)

    # Make random left and right anchors
    left_anchor = "".join(random.choices(alphabet, k=config.ANCHOR_LEN))
    right_anchor = "".join(random.choices(alphabet, k=config.ANCHOR_LEN))

    read_str = f"{left_anchor}{read}{right_anchor}"

    reads = [
        Read(
            name="read",
            sequence=read_str,
            qualities=[30] * len(read_str),
            strand="+",
            phase=0,
        ),
    ]

    satellites, breaks = process_str_pattern(structure)

    locus = Locus(
        id="locus1",
        chrom="chr1",
        start=100,
        end=200,
        left_anchor=left_anchor,
        right_anchor=right_anchor,
        structure=structure,
        satellites=satellites,
        breaks=breaks,
    )

    graph_aligments = get_graph_alignments(reads, locus)

    satellite_counts = get_satellite_counts_from_path(locus=locus, path=graph_aligments[0].path)

    observed_kmer_string, expected_kmer_string = get_satellite_strings(
        locus=locus,
        satellite_counts=satellite_counts,
        synced_sequence=graph_aligments[0].str_sequence_synced,
    )

    assert expected_kmer_string == expected_expected_kmer_string
    assert observed_kmer_string == expected_observed_kmer_string


@pytest.mark.parametrize(
    "structure, chr, start, end, read",
    [
        pytest.param(
            "(CAG)*CAACAG(CCG)*",
            "chr4",
            3074876,
            3074966,
            "GTTCGGTTACGGTATTCTTAGGCCTCCCCCCACCCCTCACCCGGCCAGTCCCCTCCCCTATCCCGCTCCGCCCCTCAGCCGCCCCGCCCCTCAGCCGGCCTGCCTAATGTCCCCGTCCCCAGCATCGCCCCGCCCCGCCCCGTCTCGCCCCGCCCCTCAGGCGGCCTCCCTGCTGTGCCCCGCCCCGGCCTCGCCACGCCTCTACCTCACCACGCCCCCGCATCGCCACGCCCCCCGCATCGCCACGCCTCCCTTCCCCATGCAGTCCCGCCCCGTCCCTTCCTCGTCCCGCCTCGCCGCGACACTTCACACACAGCTTCGCCTCACCCCATTACAGTCTCACCACGCCCCGTCCCCTCTCCGTCAGGCCCCGCGCCTTCGCCCGGGTGGGGCGCTGCGCTGTCAGCGGCCTTGCTGTGTGAGGCAGAACCTGCGGGGGCAGGGGCGGGCTGGTTCCCTGGCCAGCCATTGGCAGAGTCCGCAGGCTAGGGCTGTCAATCATGCTGGCCGGCGTGGCCCCGCCTCCGCCGGCGCGGCCCCGCCTCCGCCGGCGCAGCGTCTGGGACGCAAGGCGCCGTGGGGGCTGCCGGGACGGGTCCAAGATGGACGGCCGCTCAGGTTCTGCTTTTACCTGCAGCCCCGAGCCCCATTCATTGCCCCGGTGCTGAGCGGCGCCGCGAGTCGGCCCGAGGCCTCCGGGGACTGCCCAGTGCCGGGCGGGAGACCGCCATGGCGACCCTGGAAAAGCTGATGAAGGCCTTCGAGTCCCTCAAGTCCTTCCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAACAGCCGCCACCGCCGCCGCCGCCGCCGCCGCCTCCTCAGCTTCCTCAGCCGCCGCCGCAGGCACAGCCGCTGCTGCCTCAGCCGCAGCCGCCCCCGCCGCCGCCGCCCCCGCCGCCACCCAGCCGGCTGTGGTACAGGAGCCGCTGCACCGACCGTGAGTTTGGGCCCGCTGCAGCTCCCTGTCCCCAGCAGGTCCCAGGCTACGGCGGGGATGGCGGTAACCCTGCAGCCTGCGGGCCGGCGACACGAACCCCCGGCCCCGCAGAGACAGAGTGACCCAGCAACCCAGAGCCCATGAGGGACACCCGCCCCCTCCTGGGGCGGCGCTGCCCCCACTTCAGCCCCGCTCCCTCACTTGGGTCTTCCCTTGTCCTCTCGCGGGGGAGGCAGAGCCTTGTTGGGGCCTGTCCTGAATTCACCGAGGGGAGTCACGGCCTCAGCCCTCTCGCCCTTCGCAGGATGCGAAGAGTTGGGGGCGAAGACTTTGTTCTTTTTTTATTTGCGAGAAACCAGGGCGGGGGTTCTTTTAACTGCGTTGTGAAGAGAACTTGGAGGAGCCGAGATTTGCTCAGTGCCACTTCCCTCTTCTAGTCTGAGGGAAGAGGGCTGGGGGCGCGGGACACTTCGAGGGGAGGGCGGGGTTTGGAGCTGGAGAGATGTGGGGGCGATCGGATGACATAATGCTTTTAGGACGCCTCGGCGGGAGTGGCGGGGCGGGGGGGGCGGGGAGTGAGGGCGCGTCCAATGGGAGATTTCTTTTCCTAGTGGCACTTAAAACAGCCTGAGATTTGAGGCTCTTCCTACATTGTCAGGACATTTCATTTAGTTCATGATCACGGTGGTAGTAACACGATTTTAAGCACCACCTAAGAGATCTGCTCATCTAAGCCTAAGTTGGTCTGCAGGCGTTTAAATAGTTTGTGGTTGCCAAGTAAAGTGGTGAACTTACGTGGTGATTAATGAAATTATCTTAAATATTAGGAAGAGTTGATTGAAGTTTTTTGCCTATGTGTGTTGGGAATAAAACCAACACATTCCTAATAGGGGAGGTTAATTGCCGAGGGATGAATGAGGTGTACATTTTACCAGTATTCCAGTCAGGCTTGCCAGAATACGGGGGGTCCGCAGACTCCGTGGGCATCTCAGATGTGCCAGTGAAAGGGTTTCTGTTTGCTTGGTTTCTGACAACTTGTACTTTTTGGAAGCTAGGGGTTTCTGTTGCTTGTTCTTGGGAGAATTTTTGAAACAGGAAAAGAGAGACCATTAAAACATCTACAAAGTACCCAGGACTTTCCCTGGAAGTCTGTGTGTCGAGTGTACAGTAGGAGTTAGGAAGTACTCTGGTGCAGTTCAGGCCTTTCTCTTACCTCTCAGTATTCTATTTCCGATCTGGATGTGTCCCAGATGGCATTTGGTAAGAATATATGTAAGACTGATTAATTTTTAGTAATATTTCTTGTTCTTTGTTTCTGTTATGATCCTTGTCTCGTCTTCAAAGTTTAATTAGAAAATGAATTTTCTGGAGAGCAGTGTTAGCTTATTTGTTGGAATAAAATTTAGGAATAAATTATTCTAAAGGATGGAAAAACTTTTTGGATATTTGGAGAAATTTTAAAACAATTTGGCTTGTGTTACTTTTCGGTTAAAGTAATTTCTCATCCAGAAATTTACTGTAGTGCTTTTCTAGGAGGTAGGTGTCATAAAAGTTCACACATTGCATGTATCTTGTGTAAACACTAAACAGGGCTCCTGATGGGAAGGAAGACCTTTCTGCTGGGCTGCTTCAGACACTTGATCATTCTAAAAATATGCCTTCTCTTTCTTATGCTGATTTGACAGAACCTGCATTTGCTTATCTTCAAAATATGGGTATCAAGAAATTTCCTTTGCTGCCTTGACAAAGGAGATAGATTTTGTTCGTTGCTTAAGGTAATATATGATTACCTTATTTAAAAAATTTAATCAGGACTGGCAAGGTGGCTTACACCTTTAATCCGAGCACTTTGGGAGGCCTAGGTGGACGAATCACCTGAGGTCAGGAGTTTGAGACCAGCCTGGCTAACATGGTGAAACCCTGTCTCTACTAAAAATACAAAAATTAGCTGGTCATGGTGGCACGTGCCTGTAATCCAAGCTACCTGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCAGAGTCTGCAGTGAGTTGAGATCACGCCACTGCACTCCAGCCTGGGTGACAGAGCGAGACTCTATCTCAAAAAAAATTTTTTTTAATGTATTATTTTTGCATAAGTAATACATTGACATGATACAAATTCTGTAATTACAAAAGGGCAATAATTAAAATATCTTTCCTTCCACCCCTTTCCTCTGAGTACCTTGAGCTTTCTGCCAGAGAACAAGCACTATTTCAGTTCCTCATGTATCCTGCCAGATATAACCTGTTCATATTGTAAGATGAATTTAAAATGCTCTAAAAACAAAAGTAGTTTAGAATAATATATATCTATATATTTTTTGAGATGTAGTCTCACATTGTCACCCAGGCTGGAGTGCAGTGATACAATCTCGGCTCACTGCAGTCTCTGCCTCCCAGGTTCAAATGCTTCTCCTGCCTCAGCCTTCTGAGTAGCTGGGATTACAGGCGCCCACCACCATGTCCAGCTCATTTTTGTATTTTTAGTAGAGATGGGGTTTCACCATGTTGGCCAGGCTGGTCTTGAACTCCTGACCTTGTGATCTGTCCACCTCGGCCTCCCAAAGTGCTGGGATTACAGGTGTGAGCCACCATGCCTGGCTAGAATAATAACTTTTAAAGGTTCTTAGCATGCTCTGAAATCAACTGCATTAGGTTTATTTATAGTTTTATAGTTATTTTAAATAAAATGCATATTTGTCATATTTCTCTGTATTTTGCTGTTGAGAAAGGAGGTATTCACTAATTTTGAGTAACAAACACTGCTCACAAAGTTTGGATTTTGGCAGTTCTGTTCACGTGCTTCAGCCAAAAAATCCTCTTCTCAAAGTAAGATTGATGAAAGCAATTTAGAAAGTATCTGTTCTGTTTTTATGGCTCTTGCTCTTTGGTGTGGAACTGTGGTGTCACGCCATGCATGGGCCTCAGTTTATGAGTGTTTGTGCTCTGCTCAGCATACAGGATGCAGGAGTTCCTTATGGGGCTGGCTGCAGGCTCAGCAAATCTAGCATGCTTGGGAGGGTCCTCACAGTAATTAGGAGGCAATTAATACTTGCTTCTGGCAGTTTCTTATTCTCCTTCAGATTCCTATCTGGTGTTTCCCTGACTTTATTCATTCATCAGGTGATTACTCCAACCCTGTACTATGTGCCTGGCACTGTTATAGGTGCAGGGCTCAGCAGTGAGCAGACAAAGCTCTGCCCTCGTGAAGCTTTCATTCTAATGAAGGACATAGACAGTAAGCAAGATAGATAAGTAAAATATACAGTACGTTAATACGTGGAGGAACTTCAAAGCAGGGAAGGGGATAGGGAAATGTCAGGGTTAATCGAGTGTTAACTTATTTTTATTTTTAAAAAAATTGTTAAGGGCTTTCCAGCAAAACCCAGAAAGCCTGCTAGACAAATTCCAAAAGAGCTGTAGCACTAAGTGTTGACATTTTTATTTTATTTTGTTTTGTTTTGTTTTTTTTGAGACAGTTCTTGCTCTATCAGCCAGGCTGGAGTGCACTAGTGTGATCTTGGCTCACTGCAACCTCTGCCTCTTGGGTTCAAGTGATTCTCATGCCTCAGCCTCCTGTTTAGCTGGGATTATAGACATGCACTGCCATGCCTGGGTAATTTTTTGCCCGAGACGGAGTCTTGCTCTGTCGCCCAGGCTGGAGTGCAGTGGCGCGATCTTGGCTCACTGCAAGCTCCGCTTCCCGAGTTCACGCCATTCTCCTGCCTCAGTCTCCCAAGTAGCTGGGACTACAGGCGCCTGCCACCACGTCCAGCTAATTTTTTTGTATTTTTAATAGAGACGGGGTTTCACCGTGTTAGCCAGGATGATCTTGATCTCCTGACCTCGTCATCCGCCGACCTTGTGATCCGCCCACCTCGGCCTCCCAAAGTGCTGGGATTACAGGCATGAGCCACTGTGCCCGGCCACGCCTGGGTAATTTTTGTATTTTTAGTAGAGATGGGGTTTTGCCATGATGAGCAGGCTGGTCTCGAACTCCCGGCCTCATGTGATCTGCCTGCCTTGGCCTCCCAAAGTGCTAGGATTACAGGCATGAGCCACCATACCTGGCCAGTGTTGATATTTTAAATACGGTGTTCAGGGAAGGTCCACTGAGAAGACAGCTTTTTTTTTTTTTTTTTTTTTGGGTGGCAAGGTCTTGCTCTTTAACCCAGGCTGGAATGCAGTATCACTATCGTAGCTCACTTCAGCCTTGAACTCCTGGGCTCAAGTGATCCTCCCACCTCAACCTCACAATGTGTTGGGACTATAGGTGTGAGCCATCACACCTGGCCAGATGATGGCTTTTGAGTAAAGACCTCAAGCGAGTTAAGAGTCTAGTGTAAGGGTGTATGAAGTCAGTGGTATTCCAGATGGGGGGAACAGGTCCAAAATCTTCCTGTTTCAGGAATAGCAAGGATGTCATTTTAGTTGGGTGAATTGAGTGAGGGGGACATTTGTAGTAAGAAGTAAGGTCCAAGAGGTCAAGGGAGTGCCATATCAGACCAATACTACTTGCCTTGTAGATGGAATAAAGATATTGGCATTTATGTGAGTGAGATGGGATGTCACTGGAGGATTAGAGCAGAGGAGTAGCATGATCTGAATTTCAATCTTAAGTGAACTCTGGCTGACAACAGAGTGAAGGGGAACACCGGCAAAAGCAGAAACCAGTTAGGAAGCCACTGCAGTGCTCAGATAAGCATGGTGGGTTCTGTAGGGTACCGGCTGTCGGCTGTGGGCAGTGTGAGGAATGACTGACTGGATTTTGAAGATGCAAACCAGCTCACTTGTTGAACTCTGCTAAGTATAACAATTTAGCAGTAGCTTGCGTTATCAGGTTTGTATTCAGCTGCAAGTAACAGAAAATCCTGCTGCAATAGCTTAAACTGGTAACAAGCAAGAGCTTATCAGAAGACAAAAATAAGTCTGGGGAAATTCAACAATAAGTTAAGGAACCCAGGCTCTTTCTTTTTTTTTTTTTTTTGAAACGGAGTTTCGCTCTTGTCACCCGGGCTGGAGTGCAATGATGTGATCTCAGCTCACTAAAACCTCTACCTCCTGGGTTCAAGTGATTCTTCTGCCTCAGCCTCCCGAGTAACTGGGATTACAGGCGTATACCACCATGCCCAGCTAATTTTTGTGTTTTTAGTAGAGATGGGGTTTCACCATGTTGGCCAGGCTGGTCTCGAACTTCTGACCTCAGGTGATCCACTCGCCTCAGCCTGCCAAAGTGCTGGGATTACAGGTTTGGGCCACTGCACCCGGTTCAACCCAGGCTCTTTCTTATACTTACCTTGCAAACCCTGTTTGTGGATTTTTTCCCTTTGTATTTTTATTGTTGAATTGTAATAGTTCTTTATATATTCTGGATACTGGATTCTTATCAGATAGATGATTTGTAAAAACTCTCCCTTCCTTGGATTGTCTTTTACTTTCTTGATAGTGTCTTTTGAAGTGTAAAAGTTTTTAATTTTGATGAAGTCGAGTTTATCTATTTTGTCTTTGGTTGCTGTGCTTCAAGTGTCATATCTAAGAAATCATTGTATAATCCAAAGTCAAAAAGGTTTACTCCTATGTTTTCTTCTAAGAATTTTAGAGTTTTACATTTAAGTCTGATCCATTTTGAGTTAATTTTTATATATGGTTCAGGTAGAAGTCCAACTTTATTCTTTTCCATGTGGTTATTCAGTTGTCCCAGCACTGTTTGTTGAAGAGACTATTCTTTCCCCATGGAATTATCTTAGTACCCTTGTTGAAAATTAATCGTCCTTAATTGTATAAATTTATTTCTAGACTGTCAGTTCTACCTGTTGGTCTTTATGTCGATCCTGTGCCAGTACCATACAGTCTTGATTACTGAAGTTTGTGTCACAGTTTAAATTCATGAAATGTGAGTTCTCCAACTTTGTTCCTTTTCAAGATTGATTTGGCCATGCTGAGGTCCTTTGCATTTCCGTACGAATTGTAGGATCAGCTTGTCAGTTTCAACAAAGAAGCCAAGTAGGATTCTGAGAGGGATTGTGTTGAATCTGTAGATCAACTTGGGGAGTATTCGCATCTTAACAATATTGTCTTCCACCTATGAACATGGGCAAACTTTGTGTAAATGGTCAGATTGTAAGTATTTCGGGCTGTGTGGGCACAGTGTCTCTGTCACAGCTGAGCGGCTGTGCCCATGTAGCATGAAAGTAGCCATAAGCAATATGTATGAGTGTCTGTGTTCCAATAGAATTTTATTAATGACAAGGAAGTTTGAATTTCATATAATTTTCACCTGTCATCAATAGTATTTGATTATTTTGGTCAACCATTTAAAAATGTAAAAACATTTCTTAGCTTGTGAACTAGCCAAAAATATGCAGGTTATAGTTTTCCCACTCCTAGGTTAAAATATGATAGGACCACATTTGGAAAGCATTTCTTTTTTTTTTTTTTTTTTTTTTTTTTGAGACGGAGTTTCACTCTTGTTGCCCAGGCTGGAGTGCAGTGGCGCGATCTCGGCTCACTGCAACCTCTGCCTCCCAGGTTCAAGACATTCTCCTGCACGGCCTCCCTAGTAGCTGGGATTACAGGCATGCGCCACCACACCCAGCTAATTTTGTATTTTTAGTAGAGACGGGGTTTCTCCATGTTGGTCAGGCTGGTCTTGAACTCCTGACCTCAGGTGATCCACCCGCCTCAGCCTCCCAAAGTGCTGGGATTACAGGGTGTGAGCCACCACACCCTGCTGGAAAGCATTTCTTTTTTGGCTGTTTTTGTTTTTTTTTTAAACTAGTTTTGAAAATTATAAAAGTTACACATATAAGGTATAAAATCTCTTAAGCAGCACAGATGAAAAACAAAGCCCTTCTTGCAAGTCTGTCATCTTTGTCTAACTTCCTAAGAACAAAAGTGTTTCTTGTGTCTCTTTCCCAGATTTTAATATGCATATACAAGCATTTAAATGTGTAAATTTTGTTTCTAACTTGGGGTCACTCTCATATGTATTTTTTTCTTAACAATGTGTTATAGATATCTTCATAGCAGTACCTGTAATTTGATTTGCTATGTAATCTCTAGAATTTCTTTTTAAAAGAGGACTTTTGGAGATGTAAAGGCAAAGGTCTCACATTTTTGTGGCTGTAGAATGTGCTGGTGACATATTTCTCTACCTTGAGAAGTCCCATCCCCATCACCTCCATTTCCTCTGAAATAAGTCAACCACTTGATAAACTACCTTTGAATGGATCCACACTCAAAACATTTAGTCTTATTCAGACAACAAGGAGGAAAAATAAAATACCTTATAAAGCACTGTTTAATATTGTATTAAATTGGATCAATTTGGAGCTAGAATATTATGTGAGCATGATATGTCCATAGGTCCTTGCTATCACAGTGAGGTCTCAGGACATTGATGGTATCATTTGGGATCTCATAAGCAGACTCTCTCTGCTTGACCTGACAAATCAGAGTCTGTGTTTTAACAGGTTCAGTGAGTGACTTACATGCACATTGGAGTTTGGGAAGCTCCACTGTAGGTGCTTAGACCTTACCTTTGTTGTTGCTAATAACAATGCAGCATTTGGGAGGAAGACCTGTGTTGCTCATATGTGTCCAGGTGTAGCTGAGGTGGCCTTGCTTATCTGCTGTAGGGCCGTTGAGCATTTCTGTAGCTGTCAATGAGTGAGCTGAGGTGAGCCTGCCGGAGAGCCCCAGCCATTGGTAGTGGGACTCGCTTAGATGAACTGGAAGGACCCTTTATCTGAGCAGCCACTATGTGGAGGAAGAACAACCGAATGAGGGGAGAGACAATGTGCAATTTTATTTAGGGCACAAGGAGAGCTGTGGTTAGAAGGTGACATTTGAGTGGAAAGGGGGCAAGCCATGTGTATAGCGGGAGAAGAGAGGTCCAGGCAGAGTTAACAGAAGGCAGAAATGCTTTCCATGTTTGAGAACCAGTAAGGAGGCCAGAGTGGCTGAAGTAAGGTGAAGGGCAGAAATAAGGATGAGGCTGCGAGAGATGAGAGGTTAGAGACGAGCGTCTTGTGCACCAAGATAAGCTTGTGTGGTCAAAACAAGTAGTTTAATTTATGTTTTTAAAAGATCATTTTGGCTGGGCACAATGGTTCATGCCTGTAATACCAGTAGTTTGAGACGGTGTGGTGGGAGGATTGCCTGAGGCCAGACAACCAGCATAGCCAACATAGCAGCACCTATAAGGTCTCTACAAAAAACTTTAAAAAATTAAGCAAT",
            id="Case 1",
        ),
    ],
)
def test_cases(structure, chr, start, end, read):
    ref = Fasta("/faststorage/project/MomaReference/BACKUP/hg38/reference_genome/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna")

    reads = [
        Read(
            name="read",
            sequence=read,
            qualities=[30] * len(read),
            strand="+",
            phase=0,
        ),
    ]

    satellites, breaks = process_str_pattern(structure)

    left_anchor = str(ref[chr][(start - 500) : start])
    right_anchor = str(ref[chr][end : (end + 500)])

    locus = Locus(
        id="locus1",
        chrom=chr,
        start=start,
        end=end,
        left_anchor=left_anchor,
        right_anchor=right_anchor,
        structure=structure,
        satellites=satellites,
        breaks=breaks,
    )

    graph_aligments = get_graph_alignments(reads, locus)

    satellite_counts = get_satellite_counts_from_path(locus=locus, path=graph_aligments[0].path)

    observed_kmer_string, expected_kmer_string = get_satellite_strings(
        locus=locus,
        satellite_counts=satellite_counts,
        synced_sequence=graph_aligments[0].str_sequence_synced,
    )

    assert True
